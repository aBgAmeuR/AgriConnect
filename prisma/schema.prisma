// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  READY
  DELIVERED
  CANCELLED
}

model Client {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  orders    Order[]
  messages  Message[]
}

model Producer {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  address   String
  email     String    @unique
  password  String
  products  Product[]
  messages  Message[]
}

model Admin {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  messages  Message[]
}

model Order {
  id       String         @id @default(uuid())
  products ProductOrder[]
  status   OrderStatus
  date     DateTime       @default(now())
  clientId String
  client   Client         @relation(fields: [clientId], references: [id])
}

model Product {
  id         String         @id @default(uuid())
  name       String
  stock      Int
  producerId String
  producer   Producer       @relation(fields: [producerId], references: [id])
  orders     ProductOrder[]
}

model ProductOrder {
  productId String
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])

  @@id([productId, orderId])
}

model Message {
  id         String    @id @default(uuid())
  content    String
  sender     String
  client     Client?   @relation(fields: [clientId], references: [id])
  clientId   String?
  producer   Producer? @relation(fields: [producerId], references: [id])
  producerId String?
  admin      Admin?    @relation(fields: [adminId], references: [id])
  adminId    String?
}
